syntax = "proto3";

package mcp;

// Core JSON-RPC 2.0 message structure
message MCPRequest {
  string jsonrpc = 1;  // Always "2.0"
  oneof id {
    string string_id = 2;
    int64 number_id = 3;
  }
  string method = 4;
  bytes params = 5;  // JSON encoded parameters
}

message MCPResponse {
  string jsonrpc = 1;  // Always "2.0"
  oneof id {
    string string_id = 2;
    int64 number_id = 3;
  }
  oneof result {
    bytes success_result = 4;  // JSON encoded result
    MCPError error = 5;
  }
}

message MCPError {
  int32 code = 1;
  string message = 2;
  bytes data = 3;  // Optional JSON encoded error data
}

// MCP-specific message types for validation
message InitializeParams {
  string protocol_version = 1;
  map<string, bytes> capabilities = 2;  // JSON encoded capabilities
  ClientInfo client_info = 3;
}

message ClientInfo {
  string name = 1;
  string version = 2;
}

message InitializeResult {
  string protocol_version = 1;
  map<string, bytes> capabilities = 2;  // JSON encoded capabilities
  ServerInfo server_info = 3;
  string instructions = 4;
}

message ServerInfo {
  string name = 1;
  string version = 2;
}

// Tools
message ToolsListResult {
  repeated Tool tools = 1;
}

message Tool {
  string name = 1;
  string description = 2;
  bytes input_schema = 3;   // JSON encoded schema
  bytes output_schema = 4;  // JSON encoded schema
}

message ToolsCallParams {
  string name = 1;
  bytes arguments = 2;  // JSON encoded arguments
}

message ToolCallResult {
  repeated ContentItem content = 1;
  bytes structured_content = 2;  // JSON encoded structured content
}

// Content types
message ContentItem {
  oneof content {
    ContentText text = 1;
    ContentImage image = 2;
    ContentAudio audio = 3;
    ContentResourceLink resource_link = 4;
    ContentResource resource = 5;
  }
}

message ContentText {
  string text = 1;
}

message ContentImage {
  string data = 1;  // Base64 encoded
  string mime_type = 2;
  map<string, bytes> annotations = 3;  // JSON encoded annotations
}

message ContentAudio {
  string data = 1;  // Base64 encoded
  string mime_type = 2;
}

message ContentResourceLink {
  string name = 1;
  string uri = 2;
}

message ContentResource {
  ResourceData resource = 1;
}

message ResourceData {
  oneof data {
    string uri = 1;
    string text = 2;
    string blob = 3;  // Base64 encoded
  }
  string name = 4;
  string mime_type = 5;
}

// Prompts
message PromptsListResult {
  repeated Prompt prompts = 1;
}

message Prompt {
  string name = 1;
  string title = 2;
  string description = 3;
  repeated PromptArgument arguments = 4;
}

message PromptArgument {
  string name = 1;
  string description = 2;
  bool required = 3;
}

message PromptGetParams {
  string name = 1;
  bytes arguments = 2;  // JSON encoded arguments
}

message PromptGetResult {
  string description = 1;
  repeated PromptMessage messages = 2;
}

message PromptMessage {
  string role = 1;  // "user", "assistant", "system"
  MessageContent content = 2;
}

message MessageContent {
  string type = 1;  // "text"
  string text = 2;
}

// Resources
message ResourcesListResult {
  repeated Resource resources = 1;
  string next_cursor = 2;
}

message Resource {
  string uri = 1;
  string name = 2;
  string title = 3;
  string description = 4;
  string mime_type = 5;
  int64 size = 6;
}

message ResourceReadParams {
  string uri = 1;
}

message ResourceReadResult {
  repeated ResourceContent contents = 1;
}

message ResourceContent {
  string uri = 1;
  string name = 2;
  string title = 3;
  string description = 4;
  string mime_type = 5;
  int64 size = 6;
  string text = 7;
  string blob = 8;  // Base64 encoded
}

// Resource Templates
message ResourceTemplatesListResult {
  repeated ResourceTemplate resource_templates = 1;
}

message ResourceTemplate {
  string uri_template = 1;
  string name = 2;
  string title = 3;
  string description = 4;
  string mime_type = 5;
}

// Notifications
message NotificationAckResult {
  bool ok = 1;
}

// Ping
message PingResult {
  // Empty message for ping response
}

// Compliance validation message
message ComplianceValidation {
  string test_name = 1;
  bool passed = 2;
  string error_message = 3;
  bytes actual_message = 4;  // JSON encoded actual message
  bytes expected_schema = 5; // JSON encoded expected schema
}

// Authentication and Authorization messages
message AuthRequest {
  string token = 1;
  string resource_uri = 2;
  string transport_type = 3; // "http" or "stdio"
}

message AuthResponse {
  bool valid = 1;
  User user = 2;
  repeated string scopes = 3;
  string error_message = 4;
  int32 status_code = 5;
}

message User {
  string id = 1;
  string email = 2;
  string name = 3;
  repeated string permissions = 4;
}

message AuthError {
  string error = 1;
  string error_description = 2;
  int32 status_code = 3;
}

// OAuth 2.1 Protocol Compliance messages
message OAuthToken {
  string access_token = 1;
  string token_type = 2;
  int32 expires_in = 3;
  string refresh_token = 4;
  repeated string scope = 5;
}

message TokenIntrospection {
  bool active = 1;
  string sub = 2;
  repeated string aud = 3;
  int64 exp = 4;
  int64 iat = 5;
  repeated string scope = 6;
  string client_id = 7;
  string username = 8;
}

message ResourceValidation {
  string resource_uri = 1;
  string canonical_uri = 2;
  bool is_valid = 3;
  repeated string errors = 4;
}

message OAuthError {
  string error = 1;
  string error_description = 2;
  string error_uri = 3;
  int32 status_code = 4;
}

message SecurityIssue {
  string type = 1;
  string severity = 2;
  string description = 3;
  bytes details = 4; // JSON encoded details
}

message TokenValidationResult {
  bool is_valid = 1;
  User user = 2;
  repeated string scopes = 3;
  repeated string audience = 4;
  int64 expires_at = 5;
  repeated SecurityIssue security_issues = 6;
}

// Server Discovery & Metadata messages (RFC 8414, RFC 9728)
message AuthorizationServerMetadata {
  string issuer = 1;
  string authorization_endpoint = 2;
  string token_endpoint = 3;
  string introspection_endpoint = 4;
  string revocation_endpoint = 5;
  string registration_endpoint = 6;
  repeated string response_types_supported = 7;
  repeated string grant_types_supported = 8;
  repeated string code_challenge_methods_supported = 9;
  repeated string scopes_supported = 10;
  repeated string token_endpoint_auth_methods_supported = 11;
}

message ProtectedResourceMetadata {
  bool resource_indicators_supported = 1;
  repeated AuthorizationServerInfo authorization_servers = 2;
  repeated string scopes_supported = 3;
  repeated string resource_signing_alg_values_supported = 4;
}

message AuthorizationServerInfo {
  string issuer = 1;
  string authorization_endpoint = 2;
  string token_endpoint = 3;
  string introspection_endpoint = 4;
}

message DiscoveryError {
  string error = 1;
  string error_description = 2;
  string error_uri = 3;
}

// Well-Known Endpoint Request/Response messages
message WellKnownRequest {
  string endpoint = 1; // "oauth-authorization-server" or "oauth-protected-resource"
  map<string, string> headers = 2; // Request headers
  string method = 3; // HTTP method (GET, OPTIONS)
}

message WellKnownResponse {
  int32 status_code = 1;
  map<string, string> headers = 2;
  bytes body = 3; // JSON encoded response body
  string content_type = 4;
}

// Well-Known Endpoint specific messages
message WellKnownOAuthAuthorizationServerRequest {
  // GET /.well-known/oauth-authorization-server
  // No parameters required per RFC 8414
}

message WellKnownOAuthAuthorizationServerResponse {
  AuthorizationServerMetadata metadata = 1;
  map<string, string> headers = 2; // Response headers including CORS
}

message WellKnownOAuthProtectedResourceRequest {
  // GET /.well-known/oauth-protected-resource
  // No parameters required per RFC 9728
}

message WellKnownOAuthProtectedResourceResponse {
  ProtectedResourceMetadata metadata = 1;
  map<string, string> headers = 2; // Response headers including CORS
}

// CORS Preflight messages
message CORSPreflightRequest {
  string origin = 1;
  string method = 2;
  repeated string headers = 3;
}

message CORSPreflightResponse {
  int32 status_code = 1;
  map<string, string> headers = 2;
}

// Discovery Configuration messages
message DiscoveryConfiguration {
  AuthorizationServerConfig authorization_server = 1;
  ProtectedResourceConfig protected_resource = 2;
  bool enable_discovery_endpoints = 3;
  int32 discovery_cache_ttl = 4;
}

message AuthorizationServerConfig {
  string issuer = 1;
  string authorization_endpoint = 2;
  string token_endpoint = 3;
  string introspection_endpoint = 4;
  string revocation_endpoint = 5;
  string registration_endpoint = 6;
  repeated string supported_response_types = 7;
  repeated string supported_grant_types = 8;
  repeated string supported_code_challenge_methods = 9;
  repeated string supported_scopes = 10;
  repeated string supported_token_auth_methods = 11;
  repeated string supported_introspection_auth_methods = 12;
  repeated string supported_revocation_auth_methods = 13;
}

message ProtectedResourceConfig {
  string resource_uri = 1;
  repeated string scopes = 2;
  repeated string audience = 3;
  repeated AuthorizationServerConfig authorization_servers = 4;
  repeated string resource_signing_algorithms = 5;
}
