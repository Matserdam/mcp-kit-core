name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install
    
    - name: Run tests
      run: bun run test
    
    - name: Run linting
      run: bun run lint
    
    - name: Build project
      run: bun run build
    
    - name: Check size budgets
      run: |
        echo "üì¶ Checking size budgets..."
        
        # Check total dist size ‚â§ 600 KB
        DIST_SIZE=$(du -sk dist/ | cut -f1)
        echo "üìä Total dist size: ${DIST_SIZE}KB"
        
        if [ "$DIST_SIZE" -gt 600 ]; then
          echo "‚ùå Size budget exceeded: ${DIST_SIZE}KB > 600KB"
          exit 1
        fi
        
        # Check largest file ‚â§ 200 KB
        LARGEST_FILE=$(find dist/ -type f -name "*.js" -exec du -k {} + | sort -nr | head -1)
        LARGEST_SIZE=$(echo "$LARGEST_FILE" | cut -f1)
        LARGEST_NAME=$(echo "$LARGEST_FILE" | cut -f2)
        echo "üìÑ Largest file: $LARGEST_NAME (${LARGEST_SIZE}KB)"
        
        if [ "$LARGEST_SIZE" -gt 200 ]; then
          echo "‚ùå Largest file budget exceeded: ${LARGEST_SIZE}KB > 200KB"
          exit 1
        fi
        
        echo "‚úÖ Size budgets passed"
    
    - name: Check cold-start performance
      run: |
        echo "‚ö° Checking cold-start performance..."
        
        # Measure cold-start time ‚â§ 25ms
        COLD_START_TIME=$(node -e "
          const start = performance.now();
          import('./dist/index.js').then(() => {
            const end = performance.now();
            const duration = end - start;
            console.log(duration.toFixed(3));
            if (duration > 25) {
              console.error('Cold-start time exceeded: ' + duration.toFixed(3) + 'ms > 25ms');
              process.exit(1);
            }
          }).catch(err => {
            console.error('Import failed:', err);
            process.exit(1);
          });
        ")
        
        echo "‚è±Ô∏è Cold-start time: ${COLD_START_TIME}ms"
        echo "‚úÖ Cold-start performance passed"
    
    - name: Check for console.* usage in core library
      run: |
        echo "üîç Checking for console.* usage in core library..."
        
        # Check for console.* usage in src/lib/** (excluding tests)
        CONSOLE_USAGE=$(grep -r "console\." src/lib/ --include="*.ts" --include="*.js" || true)
        
        if [ -n "$CONSOLE_USAGE" ]; then
          echo "‚ùå Console.* usage detected in core library:"
          echo "$CONSOLE_USAGE"
          exit 1
        fi
        
        echo "‚úÖ No console.* usage in core library"
    
    - name: Check RPC switch case ordering
      run: |
        echo "üî§ Checking RPC switch case ordering..."
        
        # Check if RPC switch cases are alphabetically ordered
        # This is a basic check - in the future we can add ESLint rules
        RPC_FILE="src/lib/rpc.ts"
        if [ -f "$RPC_FILE" ]; then
          echo "üìã RPC switch cases should be alphabetically ordered in $RPC_FILE"
          # TODO: Add ESLint rule for switch case ordering (STORY-061)
        fi
        
        echo "‚úÖ RPC switch case ordering check completed"
